#!/bin/bash

# # # # # # # # # # # # # # # # # # # # # # # # # #
# Auteur : Adel Fortin
# Version : v0.2.7
# date : 23-06-2023
# # # # # # # # # # # # # # # # # # # # # # # # # #

# TODO
# Installe et configure une vm pour l'exploiter 
# - Résumé des options à renseigner pour le script
# $1 = l'option ou encore le type de distribution linux 
# $2 l'url du proxy utilisé
# $3 l'adresse où trouver les dépôts privés

#### DEBUT DU PROGRAMME
### Les variables
OPTION=""
LE_BON_DEPOT=""
MOT_DE_PASSE=""
PROXY=""
PAQUETS=("ansible" "bash-completion" "bind-utils" "checkpolicy" "curl" "dmidecode" "dnf-utils" "dstat" "elrepo-release" "epel-release" "expect" "git" "htop" "iftop" "iowatcher" "iperf3" "jq" "libselinux-utils" "logrotate" "moreutils" "nc" "netdata" "NetworkManager-config-server" "nmap" "nmap-ncat" "nmon" "pciutils" "perf" "perftest" "policycoreutils" "policycoreutils-python-utils" "prompt-dgfip" "puppet-agent" "puppet-system-conf-dgfip" "qperf" "rsync" "rsyslog" "screen" "setools-console" "strace" "sudo" "sysbench" "sysstat" "tar" "tcpdump" "telnet" "tmux" "tree" "vim" "vim-enhanced" "vnstat" "wget")
PAQUETS_SERVEUR_WEB=("php" "php-bcmath" "php-ldap" "php-mcrypt" "php-mysql" "php-odbc" "php-pdo" "php-pgsql" "php-xml")
PAQUETS_BASE_DE_DONNEES=("postgresql14" "postgresql14-server" "postgresql14-libs" "postgresql14-devel" "postgresql14plpython" "postgresql14-test" "postgresql14-contrib" "postgresql14-docs" "postgresql14-plperl" "postgresql14pltcl" "postgresql14-plpython3" "postgresql14-test" "postgresql-pgaudit" "postgresql-pgdbca" "postgresql-selinux" "pg-catcheck_14" "pg_bulkload_14" "pg_partman14" "postgresql-anonymizer_14" "pg_top_14" "pg_bulkload_14-client" "pg_repack_14" "check_postgres" "pgbadger" "pgbouncer" "pgcenter" "pg_activity" "pgcluu" "tail_n_mail" "repmgr14" "bgw_replstatus_14" "pglogical_14")
DEPOTS=""
DEPOT_SERVEUR_WEB=""
DEPOT_SERVEUR_WEB_BOOL="0"
DEPOT_SERVEUR_BDD_BOOL="0"
DEPOT_BDD=""

### Les options
PREPARE_ROCKY_LINUX=0
PREPARE_UBUNTU=0
PREPARE_CENTOS=0
PREPARE_DEBIAN=0
PREPARE_ZORINOS=0
PREPARE_ROCKY_SERVEUR_WEB=0
PREPARE_ROCKY_BASE_DE_DONNEES=0
# Les erreurs
MAUVAIS_MOT_PASSE=81

# Fonction gestion_des_options DESCRIPTION :
# interprète les options choisies pour le script et prend les actions attendues en conséquence
gestion_des_options() {
  while getopts "r:u:a:c:d:z:h:b:w" opt; do
    case $opt in
      r)
        PREPARE_ROCKY_LINUX=1
        ;;
      u)
        PREPARE_UBUNTU=1
        ;;
      a)
        PREPARE_ARCHLINUX=1
        ;;
      c)
        PREPARE_CENTOS=1
        ;;
      d)
        PREPARE_DEBIAN=1
        ;;
      z)
        PREPARE_ZORINOS=1
        ;;
      w)
        PREPARE_ROCKY_SERVEUR_WEB=1
        ;;
      b)
        PREPARE_ROCKY_BASE_DE_DONNEES=1
        ;;
      h)
        menu_aide
        exit 0
        ;;
      \?)
        menu_aide
        ;;
    esac
  done

  if [ "$PREPARE_ROCKY_LINUX" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="dnf"
  elif [ "$PREPARE_ROCKY_SERVEUR_WEB" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="dnf"
  elif [ "$PREPARE_ROCKY_BASE_DE_DONNEES" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="dnf"
  elif [ "$PREPARE_UBUNTU" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="apt"
  elif [ "$PREPARE_ARCHLINUX" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="pacman"
  elif [ "$PREPARE_CENTOS" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="dnf"
  elif [ "$PREPARE_DEBIAN" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="apt"
  elif [ "$PREPARE_ZORINOS" -eq 1 ]; then
    GESTIONNAIRE_DE_PAQUETS="apt"
  fi

  if [[ $? == 0 ]]; then 
    ajouter_proxy "$@"
  else
    menu_aide
    exit 1
  fi
}

## Fonction menu_aide DESCRIPTION :
# Affiche l'aide pour l'utilisation de l'application
menu_aide() {
  echo "Menu d'aide :"
  echo "-r : Préparer une machine virtuelle pour Rocky Linux."
  echo "-u : Préparer une machine virtuelle pour Ubuntu."
  echo "-a : Préparer une machine virtuelle pour Arch Linux."
  echo "-c : Préparer une machine virtuelle pour CentOS."
  echo "-d : Préparer une machine virtuelle pour Debian."
  echo "-z : Préparer une machine virtuelle pour Zorin OS."
  echo "-h : Afficher ce menu d'aide."
}

# Fonction pour ajouter une adresse de proxy pour DNF
# Prend un paramètre : l'adresse du proxy à ajouter
ajouter_proxy() {
  proxy="$PROXY"

  if [ "$PREPARE_ROCKY_LINUX" -eq 1 ]; then
    fichier_conf="/etc/dnf/dnf.conf"
  elif [ "$PREPARE_ROCKY_SERVEUR_WEB" -eq 1 ]; then
    fichier_conf="/etc/dnf/dnf.conf"
  elif [ "$PREPARE_ROCKY_BASE_DE_DONNEES" -eq 1 ]; then
    fichier_conf="/etc/dnf/dnf.conf"
  elif [ "$PREPARE_CENTOS" -eq 1 ]; then
    fichier_conf="/etc/dnf/dnf.conf"
  elif [ "$PREPARE_UBUNTU" -eq 1 ]; then
    fichier_conf="/etc/apt/apt.conf.d/proxy.conf"
  elif [ "$PREPARE_DEBIAN" -eq 1 ]; then
    fichier_conf="/etc/apt/apt.conf.d/proxy.conf"
  elif [ "$PREPARE_ZORINOS" -eq 1 ]; then
    fichier_conf="/etc/apt/apt.conf.d/proxy.conf"
  elif [ "$PREPARE_ARCHLINUX" -eq 1 ]; then
    fichier_conf="/etc/pacman.conf"
  else
    echo "Distribution non prise en charge."
    return 1
  fi

  if [ -f "$fichier_conf" ]; then
    if [ "$PREPARE_ROCKY_LINUX" -eq 1 ]; then
      echo "proxy=$proxy" >> "$fichier_conf"
    elif [ "$PREPARE_ROCKY_SERVEUR_WEB" -eq 1 ]; then
      echo "proxy=$proxy" >> "$fichier_conf"
    elif [ "$PREPARE_ROCKY_BASE_DE_DONNEES" -eq 1 ]; then
      echo "proxy=$proxy" >> "$fichier_conf"
    elif [ "$PREPARE_CENTOS" -eq 1 ]; then
      echo "proxy=$proxy" >> "$fichier_conf"
    elif [ "$PREPARE_UBUNTU" -eq 1 ]; then
      echo "Acquire::http::Proxy \"$proxy\";" >> "$fichier_conf"
      echo "Acquire::https::Proxy \"$proxy\";" >> "$fichier_conf"
    elif [ "$PREPARE_DEBIAN" -eq 1 ]; then
      echo "Acquire::http::Proxy \"$proxy\";" >> "$fichier_conf"
      echo "Acquire::https::Proxy \"$proxy\";" >> "$fichier_conf"
    elif [ "$PREPARE_ZORINOS" -eq 1 ]; then
      echo "Acquire::http::Proxy \"$proxy\";" >> "$fichier_conf"
      echo "Acquire::https::Proxy \"$proxy\";" >> "$fichier_conf"
    elif [ "$PREPARE_ARCHLINUX" -eq 1 ]; then
      # Ajoutez les directives de configuration du proxy pour Arch Linux
      echo "Erreur : Configuration du proxy pour Arch Linux non implémentée."
      return 1
    fi

    if [ $? -eq 0 ]; then
      echo "L'adresse du proxy '$proxy' a été ajoutée avec succès au fichier $fichier_conf."
    else
      echo "Erreur lors de l'ajout de l'adresse du proxy '$proxy' au fichier $fichier_conf."
      return 1
    fi
  else
    echo "Le fichier $fichier_conf n'existe pas ou n'est pas accessible."
    return 1
  fi

  if [[ $? == 0 ]]; then 
    configuration_des_repositories "$@"
  else
    echo "ERREUR : La configuration du proxy n'a pas pu se faire."
    exit 1
  fi
}

# Fonction pour préparer et installer des paquets
# $1 : tableau de paquets à installer

installer_paquets() {
  paquets=("$@")  # Récupère les paquets depuis les arguments
  option="$2"

  # Vérifie si des paquets sont spécifiés
  if [ ${#paquets[@]} -eq 0 ]; then
    echo -e "\e[1;31mErreur : Aucun paquet spécifié\e[0m"
    return 1
  fi

  echo -e "\e[1;33mPréparation en cours...\e[0m"

  echo -e "\e[1;33mPréparation terminée.\e[0m"

  echo -e "\e[1;33mInstallation des paquets...\e[0m"

  # Installe les paquets un par un
  for paquet in "${paquets[@]}"; do
    echo -e "Installation du paquet \e[1;36m$paquet\e[0m"
      if [ "$PREPARE_ROCKY_LINUX" -eq 1 ]; then
        sudo dnf install $paquet -y
      elif [ "$PREPARE_CENTOS" -eq 1 ]; then
        sudo dnf install $paquet -y
      elif [ "$PREPARE_UBUNTU" -eq 1 ]; then
        sudo apt install -y $paquet
      elif [ "$PREPARE_DEBIAN" -eq 1 ]; then
        sudo apt install -y $paquet
      elif [ "$PREPARE_ZORINOS" -eq 1 ]; then
        sudo apt install -y $paquet
      elif [ "$PREPARE_ARCHLINUX" -eq 1 ]; then
        sudo pacman -S --noconfirm  $paquet
      elif [ "$PREPARE_ROCKY_SERVEUR_WEB" -eq 1 ]; then
        if [ "$DEPOT_SERVEUR_WEB_BOOL" == "1" ]; then
          sleep 1
          echo "install personalisé"
          sleep 10
          derniere_version=$(dnf search --repo="$DEPOT_SERVEUR_WEB" "$paquet" | awk '/^'"$paquet"'/{print $2}' | sort -V | tail -n 1)
          if [ -z "$derniere_version"]; then
            echo "Aucune version trouvé"
            exit 1
          fi
          echo "install de la dernière versions"
          sleep 10
          sudo dnf install --repo $DEPOT_SERVEUR_WEB $paquet-$derniere_version
          sleep 1
        else
          echo "install basique"
          sleep 10
          #sudo dnf install $paquet -y
          sleep 1
        fi
      elif [ "$PREPARE_ROCKY_BASE_DE_DONNEES" -eq 1 ]; then
        sudo dnf install $paquet -y
      fi

    # Vérifie si l'installation a réussi
    if [ $? -eq 0 ]; then
      echo -e "Paquet \e[1;36m$paquet\e[0m \e[1;32minstallé avec succès.\e[0m"
    else
      echo -e "\e[1;31mErreur lors de l'installation du paquet \e[1;36m$paquet\e[0m\e[0m"
    fi
  done

  echo -e "\e[1;33mInstallation terminée.\e[0m"

  if [[ $? == 0 ]]; then 
    ajouter_proxy_github "$PROXY"
  else
    echo "ERREUR : L'installation des paquets n'a pas pu se faire."
    exit 1
  fi
}

# Fonction pour la désactivation des dépôts
disable_rocky_repo() {
    echo "Désactivation des dépôts officiels Rocky Linux..."
    sed -i 's/enabled=1/enabled=0/' /etc/yum.repos.d/Rocky-*.repo
    echo -e "\e[32mDépôt officiel Rocky Linux désactivé.\e[0m"
}

# Fonction pour la configuration des dépôts
create_custom_repo() {
    local content=$(curl -s "$1")
    local repo_name
    local repo_content

    while IFS= read -r line; do
        if [[ $line == \[*\] ]]; then
            if [[ -n $repo_name && -n $repo_content ]]; then
                create_repo_file "$repo_name" "$repo_content"
            fi
            repo_name=${line:1:-1}
            echo $repo_name
            repo_content=""
        fi
        repo_content+="$line"$'\n'
    done <<< "$content"

    if [[ -n $repo_name && -n $repo_content ]]; then
        create_repo_file "$repo_name" "$repo_content"
    fi
}

# Fonction mère de la configuration des dépôts
create_repo_file() {
    local repo_name=$1.repo
    local repo_content=$2
    local repo_path="/etc/yum.repos.d/$repo_name"

    echo "Creation du dépôt DGFIP: $repo_name"
    echo "$repo_content" > "$repo_path"
    sed -i s/proxy = None/proxy = $PROXY /etc/yum.repos.d/"$repo_name"
    echo -e "\e[32mRepo DGFIP '$repo_name' créé.\e[0m"
}

create_special_repo_file() {
  local nom_du_depot_special="$1"
  local url=$(echo $LE_BON_DEPOT | sed 's/config.repo/repos/')  
  local name=$(curl $url | grep -oP $nom_du_depot_special-socle-20[0-9]{2}-[0-9].[0-9]{2}-x86_64-20[0-9]{6} | tail -n 1)
  local repo_name="$name.repo"
  local repo_path="/etc/yum.repos.d/$repo_name"
  echo "Creation du dépôt DGFIP: $repo_name"
  echo "[$name]" > "$repo_path"
  echo "name = $name" >> "$repo_path"
  echo "baseurl = $url$name" >> $repo_path
  echo "gpgcheck = 0" >> $repo_path
  echo "enable = 1" >> $repo_path
  echo "proxy = None" >> $repo_path
  if [ $nom_du_depot_special == "php" ]; then
    DEPOT_SERVEUR_WEB="$name"
  fi
}

configuration_des_repositories() {
    local nouveaux_depots="$LE_BON_DEPOT"
    local presque_le_bon_depot=$(curl -s "$nouveaux_depots" | grep -oP socle-20[0-9]{2}-[0-9].[0-9]{2}-x86_64-depot-20[0-9]{6}.repo | tail -n 1)
    local le_bon_depot="$nouveaux_depots$presque_le_bon_depot"
    local repo_special_un="php"
    local module_special_un="-postgresql14."
    local paquet_special_un="postgresql-prerequis"
    local true="1"
    local false="0"
    disable_rocky_repo
    sleep 5
    echo "Activation du dépôt $le_bon_depot"

    create_custom_repo "$le_bon_depot"

    if [[ $? == 0 ]]; then
      echo "Fin de la configuration des dépôts"
      if [ "$PREPARE_ROCKY_LINUX" -eq 1 ]; then
        installer_paquets "${PAQUETS[@]}"
      elif [ "$PREPARE_CENTOS" -eq 1 ]; then
        installer_paquets "${PAQUETS[@]}"
      elif [ "$PREPARE_UBUNTU" -eq 1 ]; then
        installer_paquets "${PAQUETS[@]}"
      elif [ "$PREPARE_DEBIAN" -eq 1 ]; then
        installer_paquets "${PAQUETS[@]}"
      elif [ "$PREPARE_ZORINOS" -eq 1 ]; then
        installer_paquets "${PAQUETS[@]}"
      elif [ "$PREPARE_ARCHLINUX" -eq 1 ]; then
        installer_paquets "${PAQUETS[@]}"
      elif [ "$PREPARE_ROCKY_SERVEUR_WEB" -eq 1 ]; then
        create_special_repo_file "$repo_special_un"
        echo "VALIDATION TEST"
        echo "PREPARE ROCKY SERVEUR WEB = $PREPARE_ROCKY_SERVEUR_WEB"
        echo "true = $true"
        sleep 5
        DEPOT_SERVEUR_WEB_BOOL="1"
        installer_paquets "${PAQUETS_SERVEUR_WEB[@]}"
        DEPOT_SERVEUR_WEB_BOOL="0"
        installer_paquets "${PAQUETS[@]}" "$false"
      elif [ "$PREPARE_ROCKY_BASE_DE_DONNEES" -eq 1 ]; then
        activation_du_module "$module_special_un" "$paquet_special_un"
        installer_paquets "${PAQUETS_BASE_DE_DONNEES[@]}"
      fi
    else
      echo "ERREUR : La configuration des dépôts n'a pas pu se faire."
      exit 1
    fi
}

activation_du_module() {
  local nom_du_module="$1"
  local liste_de_modules=$(dnf module list | grep "$nom_du_module")
  local paquet_special="$2"

  if [ -z "$paquet_special" ]; then
    echo "Aucun paquet de pré-requis DNF trouvé."
    return 1
  else
    sudo dnf install "$paquet_special"
  fi

  if [ -z "$liste_de_modules" ]; then
    echo "Aucun module DNF trouvé."
    return 1
  fi

  local resultat_du_tail=$(echo "$liste_de_modules" | tail -n 1)
  local module_a_activer=$(echo "$resultat_du_tail" | awk '{print $1}')

  if [ -z "$module_a_activer" ]; then
    echo "Erreur lors de l'extraction du module."
    return 1
  fi

  
  echo "Activation du module DNF : $module_a_activer"
  dnf module enable "$module_a_activer" || return 1

  # Install the module
  echo "Installation du module DNF: $module_to_enable/serveur"
  dnf module install "$module_to_enable/serveur" || return 1

  echo "Installation complète du module terminé."
}

ajouter_proxy_github() {
  proxy="PROXY"
  cd $HOME
  # Vérifier si le fichier gitconfig existe
  if [ -f "~/.gitconfig" ]; then
    # Ajouter les paramètres de proxy pour GitHub au fichier
    git config --global http.proxy "$proxy"
    git config --global https.proxy "$proxy"
    # Vérifier si l'ajout a réussi
    if [ $? -eq 0 ]; then
      echo "Les paramètres de proxy pour GitHub ont été ajoutés avec succès au fichier ~/.gitconfig."
    else
    echo "Erreur lors de l'ajout des paramètres de proxy pour GitHub au fichier ~/.gitconfig."
    return 1
    fi
  else
    echo "Le fichier ~/.gitconfig n'existe pas ou n'est pas accessible."
    echo "création du fichier de .gitconfig"
    touch .gitconfig
    git config --global http.proxy "$proxy"
    git config --global https.proxy "$proxy"
  return 1
  fi
  return 0
}

injection_des_données() {
  OPTION="$1"
  PROXY="$2"
  LE_BON_DEPOT="$3"
}

##########################################################
### Fonctions dédiés au traitement des arguments
##########################################################
## Fonction traitement DESCRIPTION :
# effectue le traitement attendu sur l'argument en cours de traitement.

traitement() {
  injection_des_données "$@"
  gestion_des_options "$@"
}

## Fonction usage DESCRIPTION :
# Programme d'amorce (main) qui lance le déroulement du script, et le termine avec le code retour correspondant à la résolution du script.
usage() {
  traitement "$@"
}

##########################################################
### PROGRAMME PRINCIPAL
##########################################################

# usage "$@"
usage "$@"
exit 0
#### FIN DU PROGRAMME
